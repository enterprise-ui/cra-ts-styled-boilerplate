kind: pipeline
name: default

steps:
  - name: config
    image: node:lts-alpine
    pull: if-not-exists
    environment:
      NPM_DOMAIN:
        from_secret: NPM_DOMAIN
      NPM_AUTH_TOKEN:
        from_secret: NPM_AUTH_TOKEN
    commands:
      - echo "//$NPM_DOMAIN/repository/npm/:_authToken=$NPM_AUTH_TOKEN" > .npmrc
      - echo "//$NPM_DOMAIN/repository/npm-publish/:_authToken=$NPM_AUTH_TOKEN" >> .npmrc
      - echo "registry=https://$NPM_DOMAIN/repository/npm" >> .npmrc
      - echo "always-auth=true" >> .npmrc

  - name: install-dep
    image: node:lts-alpine
    pull: if-not-exists
    commands:
      - yarn
      - yarn --silent ci:subnamespace $DRONE_BRANCH > .subnamespace
      - yarn --silent ci:subdomain $DRONE_BRANCH > .subdomain

  - name: build-app
    image: node:lts-alpine
    pull: if-not-exists
    commands:
      - yarn --silent ci:app:tags $DRONE_BRANCH > app.env
      - cd packages/app
      - yarn build

  # - name: publish
  #   image: plugins/docker:18.09
  #   # image: docker:19.03.8-dind
  #   pull: if-not-exists
  #   # privileged: true
  #   environment:
  #     ROOT_DOMAIN:
  #       from_secret: ROOT_DOMAIN
  #     DOCKER_AUTH_USER:
  #       from_secret: DOCKER_AUTH_USER
  #     DOCKER_AUTH_PASS:
  #       from_secret: DOCKER_AUTH_PASS
  #     # tag: from .tags file, $DRONE_BRANCH-version, 0.1.1-develop
  #   commands:
  #     - export REGISTRY_DOMAIN=docker-registry.$ROOT_DOMAIN
  #     - export TAGS=$(cat .tags)
  #     - docker login -u $DOCKER_AUTH_USER -p $DOCKER_AUTH_PASS $REGISTRY_DOMAIN
  #     - cd packages/app
  #     - docker build -t $REGISTRY_DOMAIN/enterpriseui/cra-ts-styled-boilerplate:$TAGS .
  #     - docker push $REGISTRY_DOMAIN/enterpriseui/cra-ts-styled-boilerplate:$TAGS
  #     - yarn build
  #   when:
  #     branch:
  #     - master
  #     - develop
  #     event: push

  - name: publish-app
    image: plugins/docker:18.09
    pull: if-not-exists
    settings:
      repo: docker-registry.enterprise-ui.com/enterpriseui/cra-ts-styled-boilerplate
      username:
        from_secret: DOCKER_AUTH_USER
      password:
        from_secret: DOCKER_AUTH_PASS
      registry: docker-registry.enterprise-ui.com
      dockerfile: packages/app/Dockerfile
      # tag: from .tags file, $DRONE_BRANCH-version, 0.1.1-develop
      env_file: app.env
    when:
      branch:
      - master
      - develop
      - ci
      event: push

  - name: deploy-app
    image: dtzar/helm-kubectl:3.2.0
    pull: if-not-exists
    environment:
      KUBE_CFG:
        from_secret: KUBE_CFG
      ROOT_DOMAIN:
        from_secret: ROOT_DOMAIN
    commands:
      # $KUBE_CFG=base64 ~/.kube/custom-contexts/your_cluster/config.yml
      - echo $KUBE_CFG | base64 -d > kubeconfig.yaml
      - export KUBECONFIG=$(pwd)/kubeconfig.yaml
      - export REGISTRY_DOMAIN=docker-registry.$ROOT_DOMAIN
      # -develop
      - export SUBNAMESPACE=$(cat .subnamespace)
      - echo cra-ts-styled-boilerplate$SUBNAMESPACE
      # develop.
      - export SUBDOMAIN=$(cat .subdomain)
      - export DOMAIN=$${SUBDOMAIN}cra-ts-styled-boilerplate.$ROOT_DOMAIN
      - export TAGS=$(grep ^PLUGIN_TAGS= app.env | cut -d '=' -f2)
      - echo $DOMAIN
      - cd packages/app
      - |
        helm upgrade --install cra-ts-styled-boilerplate .chart \
        --namespace cra-ts-styled-boilerplate$SUBNAMESPACE \
        --set image.tag=$TAGS \
        --set image.repository=$REGISTRY_DOMAIN/enterpriseui/cra-ts-styled-boilerplate \
        --set imagePullSecrets[0].name="docker-registry-secret" \
        --set ingress.enabled=true \
        --set ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
        --set ingress.annotations."nginx\.ingress\.kubernetes\.io/proxy-body-size"=100m \
        --set ingress.annotations."cert-manager\.io\/cluster-issuer"="letsencrypt-prod" \
        --set ingress.hosts[0]=$DOMAIN \
        --set ingress.tls[0].hosts[0]=$DOMAIN \
        --set ingress.tls[0].secretName=$DOMAIN-tls
    when:
      branch:
      - master
      - develop
      - ci
      event: push

  - name: build-storybook
    image: node:lts-alpine
    pull: if-not-exists
    commands:
      - yarn --silent ci:storybook:tags $DRONE_BRANCH > storybook.env
      - cd packages/storybook
      - yarn build

  - name: publish-storybook
    image: plugins/docker:18.09
    pull: if-not-exists
    settings:
      repo: docker-registry.enterprise-ui.com/enterpriseui/cra-ts-styled-boilerplate-storybook
      username:
        from_secret: DOCKER_AUTH_USER
      password:
        from_secret: DOCKER_AUTH_PASS
      registry: docker-registry.enterprise-ui.com
      dockerfile: packages/storybook/Dockerfile
      # tag: from .tags file, $DRONE_BRANCH-version, 0.1.1-develop
      env_file: storybook.env
    when:
      branch:
      - master
      - develop
      - ci
      event: push

  - name: deploy-storybook
    image: dtzar/helm-kubectl:3.2.0
    pull: if-not-exists
    environment:
      KUBE_CFG:
        from_secret: KUBE_CFG
      ROOT_DOMAIN:
        from_secret: ROOT_DOMAIN
    commands:
      # $KUBE_CFG=base64 ~/.kube/custom-contexts/your_cluster/config.yml
      - echo $KUBE_CFG | base64 -d > kubeconfig.yaml
      - export KUBECONFIG=$(pwd)/kubeconfig.yaml
      - export REGISTRY_DOMAIN=docker-registry.$ROOT_DOMAIN
      # -develop
      - export SUBNAMESPACE=$(cat .subnamespace)
      - echo cra-ts-styled-boilerplate$SUBNAMESPACE
      # develop.
      - export SUBDOMAIN=$(cat .subdomain)
      - export TAGS=$(grep ^PLUGIN_TAGS= storybook.env | cut -d '=' -f2)
      - export DOMAIN=storybook.$${SUBDOMAIN}cra-ts-styled-boilerplate.$ROOT_DOMAIN
      - echo $DOMAIN
      - cd packages/storybook
      - |
        helm upgrade --install cra-ts-styled-boilerplate-storybook .chart \
        --namespace cra-ts-styled-boilerplate$SUBNAMESPACE \
        --set image.tag=$TAGS \
        --set image.repository=$REGISTRY_DOMAIN/enterpriseui/cra-ts-styled-boilerplate-storybook \
        --set imagePullSecrets[0].name="docker-registry-secret" \
        --set ingress.enabled=true \
        --set ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
        --set ingress.annotations."nginx\.ingress\.kubernetes\.io/proxy-body-size"=100m \
        --set ingress.annotations."cert-manager\.io\/cluster-issuer"="letsencrypt-prod" \
        --set ingress.hosts[0]=$DOMAIN \
        --set ingress.tls[0].hosts[0]=$DOMAIN \
        --set ingress.tls[0].secretName=$DOMAIN-tls
    when:
      branch:
      - master
      - develop
      - ci
      event: push